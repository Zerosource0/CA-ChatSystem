/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import ca.client.Client;
import ca.client.ServerInfo;
import ca.client.MessageProcessor;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author marcj_000
 */
public class gui extends javax.swing.JFrame implements Observer {

    Client client;
    String message;
    String ip;
    Boolean connected;
    String name;
    ArrayList<String> prefixHistory;
    int prefixIterator;
    ArrayList<String> multipleReciepients;

    public void connect() {
        prefixHistory = new ArrayList();
        prefixIterator = 0;
        multipleReciepients = new ArrayList();
        Thread t1 = new Thread(client);

        client.addObserver(this);
        try {
            System.out.println("Connecting with settings: " + client.getIp() + ", " + name);
            client.connect(client.getIp(), 9090);
            connected = true;
            serverMenu.setEnabled(false);
            connectMenuButton.setEnabled(false);
            disconnectMenuButton.setEnabled(true);
            serverNameLabel.setText("Users connected to " + client.getIp());
            chatTextList.setText(chatTextList.getText() + "\nConnected to " + client.getIp());
            t1.start();
        } catch (Exception ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            chatTextList.setText(chatTextList.getText() + "\nCouldn't connect.. Please check settings");
        }

    }

    public void checkConnectedToServer() {

        if (connected) {
            return;
        } else {
            chatTextList.setForeground(Color.RED);
            chatTextList.setText(chatTextList.getText() + "\n" + "You are not connected to a server.\nPlease click File -> Connect to connect.");
            chatTextList.setForeground(Color.BLACK);
        }

    }

    public gui() {
        initComponents();

        userList.setModel(new DefaultListModel());

        serverNameLabel.setText("Waiting for Connection");
        disconnectMenuButton.setEnabled(false);
        chatTextList.setEditable(false);
        messageField.requestFocus();
        client = new Client();
        connected = false;
        userList.removeAll();
        client.loadSettings();
        ip = client.getIp();
        name = client.getUserName();
        updateServerMenu();
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                if (connected) {
                    client.send("STOP#");
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatTextList = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        serverNameLabel = new javax.swing.JLabel();
        prefixLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        connectMenuButton = new javax.swing.JMenuItem();
        disconnectMenuButton = new javax.swing.JMenuItem();
        serverMenu = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        settingsMenuButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        messageField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                messageFieldMouseClicked(evt);
            }
        });
        messageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageFieldActionPerformed(evt);
            }
        });
        messageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                messageFieldKeyReleased(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        chatTextList.setColumns(20);
        chatTextList.setRows(5);
        jScrollPane1.setViewportView(chatTextList);

        userList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        userList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userListMouseClicked(evt);
            }
        });
        userList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userListKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                userListKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(userList);

        serverNameLabel.setText("Looong server name trorlrorlrorlrorlrorrlrllrorororror");

        prefixLabel.setText("prefix");

        jLabel1.setText("Prefix:");

        jMenu1.setText("File");

        connectMenuButton.setText("Connect ");
        connectMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectMenuButtonActionPerformed(evt);
            }
        });
        jMenu1.add(connectMenuButton);

        disconnectMenuButton.setText("Disconnect");
        disconnectMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectMenuButtonActionPerformed(evt);
            }
        });
        jMenu1.add(disconnectMenuButton);

        jMenuBar1.add(jMenu1);

        serverMenu.setText("Servers");
        jMenuBar1.add(serverMenu);

        jMenu2.setText("Edit");

        settingsMenuButton.setText("Settings..");
        settingsMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuButtonActionPerformed(evt);
            }
        });
        jMenu2.add(settingsMenuButton);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                            .addComponent(messageField))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(serverNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(5, 5, 5)
                        .addComponent(prefixLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serverNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prefixLabel)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        checkConnectedToServer();
        client.send(prefixLabel.getText() + messageField.getText());
        messageField.setText("");

    }//GEN-LAST:event_sendButtonActionPerformed

    private void messageFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messageFieldMouseClicked

    }//GEN-LAST:event_messageFieldMouseClicked

    private void messageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageFieldActionPerformed
        checkConnectedToServer();
        multipleReciepients = new ArrayList();
        prefixHistory.add(prefixLabel.getText());
        prefixIterator = prefixHistory.size();
        client.send(prefixLabel.getText() + messageField.getText());
        messageField.setText("");
    }//GEN-LAST:event_messageFieldActionPerformed

    private void connectMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMenuButtonActionPerformed
        connect();
    }//GEN-LAST:event_connectMenuButtonActionPerformed

    private void disconnectMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectMenuButtonActionPerformed
        client.send("STOP#");
        connected = false;
        serverMenu.setEnabled(true);
        connectMenuButton.setEnabled(true);
        disconnectMenuButton.setEnabled(false);
        chatTextList.setText(chatTextList.getText() + "\nDisconnect from " + client.getIp());
        serverNameLabel.setText("Waiting for Connection");
    }//GEN-LAST:event_disconnectMenuButtonActionPerformed

    private void settingsMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuButtonActionPerformed
        settingGui sGui = new settingGui(this);
        sGui.setVisible(true);
        updateServerMenu();
    }//GEN-LAST:event_settingsMenuButtonActionPerformed

    private void userListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userListMouseClicked

        String reciepient = userList.getSelectedValue().toString();

        if (shiftPressed) {
            multipleReciepients.add(reciepient);
            String msg = "MSG#";
            for (String rec : multipleReciepients) {
                msg = msg.concat(rec + ",");
            }
            msg = msg.concat("#");
            prefixLabel.setText(msg);
        } else {
            prefixLabel.setText("MSG#" + reciepient + "#");
        }
    }//GEN-LAST:event_userListMouseClicked


    private void messageFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            if (messageField.getText().isEmpty()) {
                prefixLabel.setText("");
            }
        }

        //Automatically add MSG# to prefix and delete text in msgField if typed by user
        if (evt.getKeyChar() == '#') {

            if (prefixLabel.getText().equals("prefix") | prefixLabel.getText().isEmpty()) {
                if (messageField.getText().equals("MSG")) {
                    prefixLabel.setText("MSG#");
                    messageField.setText("");
                }
            }
        }

        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            try {
                prefixLabel.setText(prefixHistory.get(prefixIterator));
            } catch (IndexOutOfBoundsException e) {
            }

            prefixIterator--;
            if (prefixIterator == 0) {
                prefixIterator = prefixHistory.size();
            }
        }
    }//GEN-LAST:event_messageFieldKeyPressed

    private void messageFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_messageFieldKeyReleased

    private boolean shiftPressed = false;
    private void userListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userListKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SHIFT) {
            shiftPressed = true;
        }
    }//GEN-LAST:event_userListKeyPressed

    private void userListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userListKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_SHIFT) {
            shiftPressed = false;

        }
    }//GEN-LAST:event_userListKeyReleased

    public void updateServerMenu() {
        serverMenu.removeAll();
        for (final ServerInfo server : client.getServers()) {
            JMenuItem menuItem = new javax.swing.JMenuItem(server.getName());
            menuItem.setText(server.getName());

            menuItem.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ev) {
                    System.out.println("SERVER MENU ITEM CLICKED!");
                    client.setIp(server.getIp());
                }
            });
            serverMenu.add(menuItem);
        }

    }

    @Override
    public void update(Observable o, Object arg) {
        message = (String) arg;
        if (!message.equals("")) {
            chatTextList.setText(chatTextList.getText() + "\n" + message);
        }
        updateUserList();

    }

    public void updateUserList() {
        userList.removeAll();
        DefaultListModel listModel = new DefaultListModel();
        for (String user : client.getUsers()) {
            listModel.addElement(user);
        }
        userList.setModel(listModel);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatTextList;
    private javax.swing.JMenuItem connectMenuButton;
    private javax.swing.JMenuItem disconnectMenuButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField messageField;
    private javax.swing.JLabel prefixLabel;
    private javax.swing.JButton sendButton;
    private javax.swing.JMenu serverMenu;
    private javax.swing.JLabel serverNameLabel;
    private javax.swing.JMenuItem settingsMenuButton;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables

}
